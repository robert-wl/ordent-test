basePath: /api/v1
definitions:
  dto.CreateArticleRequest:
    properties:
      body:
        type: string
      title:
        type: string
    required:
    - body
    - title
    type: object
  dto.LogInRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.LogInResponse:
    properties:
      access_token:
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.UpdateArticleRequest:
    properties:
      body:
        type: string
      title:
        type: string
    required:
    - body
    - title
    type: object
  model.Article:
    properties:
      body:
        type: string
      created_at:
        type: string
      secure_id:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/model.User'
      views:
        type: integer
    type: object
  model.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      secure_id:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  utils.ErrorResponse:
    properties:
      error:
        items:
          type: string
        type: array
      message:
        type: string
      status_code:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server for Ordent Test.
  title: Ordent Test API
  version: "1.0"
paths:
  /articles:
    get:
      consumes:
      - application/json
      description: Get all articles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Article'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      tags:
      - articles
    post:
      consumes:
      - application/json
      description: Create an article with the provided data
      parameters:
      - description: Article data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateArticleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Article'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      tags:
      - articles
  /articles/{id}:
    put:
      consumes:
      - application/json
      description: Update an article with the provided data
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: string
      - description: Article data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateArticleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Article'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      tags:
      - articles
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with their credentials and return an access
        token
      parameters:
      - description: User credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LogInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LogInResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      tags:
      - authentication
  /auth/me:
    get:
      consumes:
      - application/json
      description: Get the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      tags:
      - authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a user with their credentials
      parameters:
      - description: User credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      tags:
      - authentication
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
